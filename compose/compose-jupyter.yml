version: "2"

services:

  # PostgreSQL database
  postgres:
    image: postgres:10-alpine
    container_name: "postgres"
    hostname: postgres
    restart: always
    env_file:
      - ./env/postgres-dev.env
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./data/common:/data/common
    logging:
      # limit logs retained on host to 25MB
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "50"

  jupyter:
    depends_on:
      - postgres
    container_name: jupyterhub
    image: jupyterhub/jupyterhub:latest
    hostname: jupyterhub
    restart: always
    volumes:
      # Bind Docker socket on the host so we can connect to the daemon from
      # within the container
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
      # Bind Docker volume on host for JupyterHub database and cookie secrets
      - ./data/jupyter:/data
      - ./data/common:/data/common
      - ./data/notebooks:/data/notebooks
      - ./ssl:/ssl
      - ./files:/files
    ports:
      - "443:443"
      - "8081:8081"
    environment:
      USERLIST_FILE: /files/jupyter_userlist
      DOCKER_NOTEBOOK_DIR: /data/notebooks
      # All containers will join this network
      DOCKER_NETWORK_NAME: default
      # JupyterHub will spawn this Notebook image for users
      DOCKER_NOTEBOOK_IMAGE: jupyter-admin
      # Notebook directory inside user image
      # DOCKER_NOTEBOOK_DIR: ${DOCKER_NOTEBOOK_DIR}
      # Using this run command (optional)
      # DOCKER_SPAWN_CMD: ${DOCKER_SPAWN_CMD}
      # Postgres db info
      SSL_KEY: /ssl/jupyter_server_key.pem
      SSL_CERT: /ssl/jupyter_server_cert.pem
      POSTGRES_DB: jupyter
      POSTGRES_HOST: postgres
    env_file:
      - ./env/postgres-dev.env
      - ./env/oauth.env
    entrypoint: "/files/start-jupyter.sh"
